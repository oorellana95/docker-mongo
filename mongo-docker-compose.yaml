version: "3"
services:
  # local image, required command: docker build -t my-app:staging .
  #my-app:
  # image: my-app:staging
  # ports:
  #   - "3000:3000"

  # docker registry: {docker-registry}/my-app:1.0
  #my-app:
  # image: {docker-registry}/my-app:1.0
  # ports:
  #   - "3000:3000"


  # Running independently:
  # local image, required command: docker build -t my-app:staging .
  # docker run -p 3000:3000 --name app --network={add_generated_network by docker_compose or create an independent network} my-app:staging
  
  mongodb:
    image: mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    healthcheck:
      test:  echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    volumes:
      - "mongo-data:/data/db" # name of the volume (see below) and the default path where mongo saves its data
  mongo-express:
    image: mongo-express
    # restart: on-failure
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_PORT=27017
    depends_on:
      mongodb:
        condition: service_healthy
volumes:
  mongo-data:
    driver: local
